{"version":3,"file":"content.js","mappingssources":["webpack://extension/./Public/content.ts"],"sourcesContent":["let allAnnotations = [];\n// Listener for messages from the background script\n// Listener for messages from the background script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === \"REAPPLY_ANNOTATIONS\") {\n        const annotations = message.annotations;\n        // Check if annotations are received\n        if (annotations && annotations.length > 0) {\n            allAnnotations = annotations;\n            console.log(allAnnotations); // Check if annotations are stored correctly\n            applyAnnotations(); // Call a function to apply annotations to the DOM\n        }\n        else {\n            console.error(\"Received empty or invalid annotations.\");\n        }\n    }\n});\nwindow.onload = () => {\n    console.log(\"Window loaded\");\n    chrome.runtime.sendMessage({\n        type: \"REQUEST_ANNOTATIONS\",\n        url: window.location.href,\n    });\n    createToolbar();\n    applyAnnotations(); // Call the function to apply annotations when the window loads\n};\nvar color = \"yellow\";\nlet ishighlight = false;\nlet note = \"\";\nlet fontcolor = \"white\";\nlet fontstyle = \"normal\";\nfunction createToolbar() {\n    console.log(\"Creating toolbar\");\n    const toolbar = document.createElement(\"div\");\n    toolbar.id = \"annotation-toolbar\";\n    toolbar.className =\n        \"annotation-toolbar flex flex-grow top-0 left-0 w-full bg-gray-800 text-white flex justify-around p-2 z-50\";\n    toolbar.style.setProperty(\"display\", \"flex\", \"important\");\n    toolbar.style.setProperty(\"position\", \"fixed\", \"important\");\n    toolbar.style.setProperty(\"top\", \"0\", \"important\");\n    toolbar.style.setProperty(\"left\", \"0\", \"important\");\n    toolbar.style.setProperty(\"width\", \"100%\", \"important\");\n    toolbar.style.setProperty(\"z-index\", \"10001\", \"important\");\n    toolbar.style.setProperty(\"background-color\", \"#4A5568\", \"important\"); // Tailwind CSS color bg-gray-800\n    toolbar.style.setProperty(\"color\", \"white\", \"important\");\n    toolbar.style.setProperty(\"justify-content\", \"space-around\", \"important\");\n    toolbar.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    toolbar.style.setProperty(\"box-sizing\", \"border-box\", \"important\");\n    const buttonStyle = `\r\n    background-color: #4299E1; /* Tailwind CSS color bg-blue-500 */\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    cursor: pointer;\r\n    color: white;\r\n    font-size: 14px;\r\n    margin: 0.5rem;\r\n    border-radius: 0.25rem;\r\n  `;\n    const highlightButton = document.createElement(\"button\");\n    highlightButton.id = \"highlight-button\";\n    highlightButton.textContent = \"Highlight\";\n    highlightButton.style.cssText = buttonStyle;\n    highlightButton.style.setProperty(\"color\", \"black\", \"important\");\n    highlightButton.addEventListener(\"click\", () => {\n        if (ishighlight) {\n            note = \"\";\n            highlightButton.textContent = \"Highlight\";\n            handleHighlightClick(color);\n        }\n        else {\n            highlightButton.textContent = \"Stop Highlight\";\n            handleHighlightClick(color);\n        }\n    });\n    const colorhighlight = document.createElement(\"button\");\n    colorhighlight.id = \"color\";\n    colorhighlight.textContent = \"Color\";\n    colorhighlight.style.cssText = buttonStyle;\n    colorhighlight.style.setProperty(\"color\", \"black\", \"important\");\n    const colorInput = document.createElement(\"input\");\n    colorInput.type = \"color\";\n    colorInput.value = \"#000000\"; // Default color value\n    colorInput.className = \"hidden\";\n    colorInput.style.setProperty(\"display\", \"none\", \"important\");\n    colorhighlight.onclick = function () {\n        colorInput.classList.toggle(\"hidden\");\n        colorInput.style.setProperty(\"display\", colorInput.style.display === \"none\" ? \"inline-block\" : \"none\", \"important\");\n    };\n    colorInput.addEventListener(\"input\", function (e) {\n        const target = e.target;\n        if (target) {\n            color = target.value;\n        }\n    });\n    const textboxButton = document.createElement(\"button\");\n    textboxButton.id = \"note\";\n    textboxButton.textContent = \"Add Note\";\n    textboxButton.style.cssText = buttonStyle.replace(\"#4299E1\", \"#48BB78\"); // Tailwind CSS color bg-green-500\n    textboxButton.style.setProperty(\"color\", \"black\", \"important\");\n    const textInputContainer = document.createElement(\"div\");\n    textInputContainer.className = \"hidden mt-2\";\n    textInputContainer.style.setProperty(\"display\", \"none\", \"important\");\n    textInputContainer.style.setProperty(\"margin-top\", \"0.5rem\", \"important\");\n    const Fontcolorhighlight = document.createElement(\"button\");\n    Fontcolorhighlight.id = \"font-color\";\n    Fontcolorhighlight.textContent = \"Font-Color\";\n    Fontcolorhighlight.style.cssText = buttonStyle.replace(\"#4299E1\", \"#48BB78\"); // Tailwind CSS color bg-green-500\n    Fontcolorhighlight.style.setProperty(\"color\", \"black\", \"important\");\n    const FontcolorInput = document.createElement(\"input\");\n    FontcolorInput.type = \"color\";\n    FontcolorInput.value = \"#000000\"; // Default color value\n    FontcolorInput.className = \"hidden\";\n    FontcolorInput.style.setProperty(\"display\", \"none\", \"important\");\n    Fontcolorhighlight.onclick = function () {\n        FontcolorInput.classList.toggle(\"hidden\");\n        FontcolorInput.style.setProperty(\"display\", FontcolorInput.style.display === \"none\" ? \"inline-block\" : \"none\", \"important\");\n    };\n    FontcolorInput.addEventListener(\"input\", function (e) {\n        const target = e.target;\n        if (target) {\n            fontcolor = target.value;\n        }\n    });\n    const FontStyle = document.createElement(\"select\");\n    FontStyle.style.cssText = buttonStyle.replace(\"#4299E1\", \"#48BB78\"); // Tailwind CSS color bg-green-500\n    FontStyle.style.setProperty(\"color\", \"black\", \"important\"); // Set select text color to black\n    const FontstyleOption = document.createElement(\"option\");\n    FontstyleOption.textContent = \"Font Style\";\n    const normalOption = document.createElement(\"option\");\n    normalOption.value = \"normal\";\n    normalOption.textContent = \"Normal\";\n    const obliqueOption = document.createElement(\"option\");\n    obliqueOption.value = \"oblique\";\n    obliqueOption.textContent = \"Oblique\";\n    const oblique40Option = document.createElement(\"option\");\n    oblique40Option.value = \"oblique 40deg\";\n    oblique40Option.textContent = \"Oblique 40deg\";\n    FontStyle.appendChild(FontstyleOption);\n    FontStyle.appendChild(normalOption);\n    FontStyle.appendChild(obliqueOption);\n    FontStyle.appendChild(oblique40Option);\n    FontStyle.addEventListener(\"change\", (event) => {\n        const firstChild = FontStyle.firstChild;\n        if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.textContent) === \"Font Style\") {\n            FontStyle.removeChild(firstChild);\n        }\n        const target = event.target;\n        if (target) {\n            fontstyle = target.value;\n        }\n    });\n    const TextInput = document.createElement(\"input\");\n    TextInput.type = \"text\";\n    TextInput.placeholder = \"Enter your note here...\";\n    TextInput.className =\n        \"w-full p-2 border  border-gray-300 rounded box-border text-black\";\n    TextInput.style.setProperty(\"width\", \"100%\", \"important\");\n    TextInput.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    TextInput.style.setProperty(\"border\", \"1px solid #D1D5DB\", \"important\"); // Tailwind CSS color border-gray-300\n    TextInput.style.setProperty(\"border-radius\", \"0.25rem\", \"important\");\n    TextInput.style.setProperty(\"box-sizing\", \"border-box\", \"important\");\n    TextInput.style.setProperty(\"color\", \"black\", \"important\");\n    const submitButton = document.createElement(\"button\");\n    submitButton.textContent = \"Submit\";\n    submitButton.className =\n        \"block w-full p-2 bg-green-600 text-white border-none rounded cursor-pointer mt-2\";\n    submitButton.style.cssText = buttonStyle.replace(\"#4299E1\", \"#38A169\"); // Tailwind CSS color bg-green-600\n    submitButton.style.setProperty(\"width\", \"100%\", \"important\");\n    submitButton.style.setProperty(\"margin-top\", \"0.5rem\", \"important\");\n    submitButton.onclick = () => {\n        const note = TextInput.value.trim();\n        if (note) {\n            console.log(\"Note:\", note);\n            textInputContainer.classList.add(\"hidden\");\n            TextInput.value = \"\";\n        }\n    };\n    textboxButton.onclick = function () {\n        textInputContainer.classList.toggle(\"hidden\");\n        textInputContainer.style.setProperty(\"display\", textInputContainer.style.display === \"none\" ? \"block\" : \"none\", \"important\");\n    };\n    TextInput.addEventListener(\"input\", function (e) {\n        const target = e.target;\n        if (target) {\n            note = target.value;\n        }\n    });\n    textInputContainer.appendChild(TextInput);\n    textInputContainer.appendChild(submitButton);\n    const saveButton = document.createElement(\"button\");\n    saveButton.textContent = \"Save\";\n    saveButton.style.cssText = buttonStyle\n        .replace(\"#4299E1\", \"#ECC94B\")\n        .replace(\"color: white;\", \"color: black;\"); // Tailwind CSS color bg-yellow-400\n    saveButton.onclick = () => {\n        const toolbar = document.getElementById(\"annotation-toolbar\");\n        if (toolbar) {\n            toolbar.style.display = \"none\";\n        }\n        window.print();\n    };\n    window.onafterprint = () => {\n        const toolbar = document.getElementById(\"annotation-toolbar\");\n        if (toolbar) {\n            toolbar.style.display = \"flex\";\n        }\n    };\n    const searchInput = document.createElement(\"input\");\n    searchInput.type = \"text\";\n    searchInput.placeholder = \"Search Annotations\";\n    searchInput.className = \"p-2 mr-2 text-black\";\n    searchInput.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    searchInput.style.setProperty(\"margin-right\", \"0.5rem\", \"important\");\n    searchInput.style.setProperty(\"color\", \"black\", \"important\");\n    const filterOptions = document.createElement(\"select\");\n    filterOptions.innerHTML = `\r\n    <option value=\"Filter\">Filter</option>\r\n    <option value=\"text\">Annotation Text</option>\r\n    <option value=\"note\">Note Text</option>\r\n  `;\n    filterOptions.className = \"p-2 mr-2 text-black bg-white border border-gray-300 rounded\";\n    filterOptions.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    filterOptions.style.setProperty(\"margin-right\", \"0.5rem\", \"important\");\n    filterOptions.style.setProperty(\"color\", \"black\", \"important\");\n    filterOptions.addEventListener('click', () => {\n        for (let i = 0; i < filterOptions.options.length; i++) {\n            if (filterOptions.options[i].value === \"Filter\") {\n                // Remove the option\n                filterOptions.remove(i);\n                break;\n            }\n        }\n    });\n    const SortOptions = document.createElement(\"select\");\n    SortOptions.innerHTML = `\r\n    <option value=\"Sort\">Sort</option>\r\n    <option value=\"latest\">Latest</option>\r\n    <option value=\"oldest\">Oldest</option>\r\n    <option value=\"alphabetically\">Alphabetically</option>\r\n  `;\n    SortOptions.className = \"p-2 mr-2 text-black\";\n    SortOptions.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    SortOptions.style.setProperty(\"margin-right\", \"0.5rem\", \"important\");\n    SortOptions.style.setProperty(\"color\", \"black\", \"important\");\n    SortOptions.addEventListener('click', () => {\n        for (let i = 0; i < SortOptions.options.length; i++) {\n            if (SortOptions.options[i].value === \"Sort\") {\n                // Remove the option\n                SortOptions.remove(i);\n                break;\n            }\n        }\n    });\n    const searchButton = document.createElement(\"button\");\n    searchButton.textContent = \"Search\";\n    searchButton.style.cssText = buttonStyle\n        .replace(\"#4299E1\", \"#4299E1\")\n        .replace(\"color: white;\", \"color: black;\"); // Tailwind CSS color text-blue-500\n    searchButton.style.setProperty(\"color\", \"black\", \"important\");\n    const searchResultContainer = document.createElement(\"div\");\n    searchResultContainer.id = \"search-result-container\";\n    searchResultContainer.className =\n        \"mt-2 overflow-y-auto border border-gray-300 rounded shadow p-2 hidden\";\n    searchResultContainer.style.setProperty(\"margin-top\", \"0.5rem\", \"important\");\n    searchResultContainer.style.setProperty(\"max-height\", \"10rem\", \"important\");\n    searchResultContainer.style.setProperty(\"overflow-y\", \"auto\", \"important\");\n    searchResultContainer.style.setProperty(\"border\", \"1px solid #D1D5DB\", \"important\"); // Tailwind CSS color border-gray-300\n    searchResultContainer.style.setProperty(\"border-radius\", \"0.25rem\", \"important\");\n    searchResultContainer.style.setProperty(\"box-shadow\", \"0 0.5rem 1rem rgba(0, 0, 0, 0.1)\", \"important\"); // Tailwind CSS shadow\n    searchResultContainer.style.setProperty(\"padding\", \"0.5rem\", \"important\");\n    searchResultContainer.style.setProperty(\"background-color\", \"white\", \"important\"); // White background\n    searchResultContainer.style.setProperty(\"color\", \"black\", \"important\"); // Black text\n    const closeButton = document.createElement(\"button\");\n    closeButton.textContent = \"Close\";\n    closeButton.style.cssText = buttonStyle\n        .replace(\"#4299E1\", \"#4299E1\")\n        .replace(\"color: white;\", \"color: black;\"); // Tailwind CSS color text-blue-500\n    closeButton.style.setProperty(\"color\", \"black\", \"important\");\n    // closeButton.className = 'absolute top-0 right-0 m-2 text-gray-500 hover:text-gray-700';\n    searchResultContainer.style.display = \"none\";\n    // Existing code...\n    searchResultContainer.appendChild(closeButton);\n    // Toggle visibility of the search result container when the search button is clicked\n    searchButton.onclick = () => {\n        const keyword = searchInput.value.trim();\n        const filter = filterOptions.value;\n        const sort = SortOptions.value;\n        console.log(keyword);\n        searchAndFilterAnnotations(keyword, filter, sort);\n        // Toggle the visibility of the search result container\n        searchResultContainer.style.display = \"block\";\n    };\n    closeButton.addEventListener('click', () => {\n        searchResultContainer.style.display = \"none\";\n    });\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.className = \"flex items-center\";\n    const notecontainer = document.createElement(\"div\");\n    notecontainer.className = \"flex items-center\";\n    notecontainer.appendChild(textboxButton);\n    notecontainer.appendChild(textInputContainer);\n    notecontainer.appendChild(Fontcolorhighlight);\n    notecontainer.appendChild(FontcolorInput);\n    notecontainer.appendChild(FontStyle);\n    buttonContainer.appendChild(highlightButton);\n    buttonContainer.appendChild(colorhighlight);\n    buttonContainer.appendChild(colorInput);\n    // searchResultContainer.appendChild(closeButton);\n    toolbar.appendChild(buttonContainer);\n    toolbar.appendChild(notecontainer);\n    toolbar.appendChild(saveButton);\n    toolbar.appendChild(searchInput);\n    toolbar.appendChild(filterOptions);\n    toolbar.appendChild(SortOptions);\n    toolbar.appendChild(searchButton);\n    toolbar.appendChild(closeButton);\n    toolbar.appendChild(searchResultContainer);\n    // Add hover effect to buttons\n    document.body.appendChild(toolbar);\n}\nconst cardStyle = `\r\n  background-color: white;\r\n  color: black;\r\n  padding: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 0.25rem;\r\n`;\nfunction searchAndFilterAnnotations(keyword, filter, sort) {\n    let filteredAnnotations = allAnnotations;\n    if (keyword) {\n        const regex = new RegExp(keyword, \"i\"); // Regular expression with word boundary anchors\n        console.log(regex);\n        if (filter === \"text\") {\n            filteredAnnotations = filteredAnnotations.filter((annotation) => regex.test(annotation.text));\n        }\n        else if (filter === \"note\") {\n            filteredAnnotations = filteredAnnotations.filter((annotation) => typeof annotation.note_text === \"string\" &&\n                regex.test(annotation.note_text));\n        }\n        // Sort the filtered annotations based on the specified sort option\n        if (sort === \"latest\") {\n            filteredAnnotations = sortAnnotationslatest(filteredAnnotations);\n        }\n        else if (sort === \"oldest\") {\n            filteredAnnotations = sortAnnotationsoldest(filteredAnnotations);\n        }\n        else if (sort === \"alphabetically\") {\n            filteredAnnotations = sortAnnotationsalphabetically(filteredAnnotations, \"text\");\n        }\n        // Display the filtered annotations\n        const searchResultContainer = document.getElementById(\"search-result-container\");\n        if (searchResultContainer) {\n            searchResultContainer.innerHTML = \"\"; // Clear previous search results\n            if (filteredAnnotations.length === 0) {\n                // Display a prompt if no search results are found\n                const noResultsMessage = document.createElement(\"div\");\n                noResultsMessage.textContent = \"No results found\";\n                noResultsMessage.style.cssText = `\r\n          padding: 0.5rem;\r\n          text-align: center;\r\n          color: #666;\r\n        `;\n                searchResultContainer.appendChild(noResultsMessage);\n            }\n            else {\n                filteredAnnotations.forEach((annotation) => {\n                    const item = document.createElement(\"div\");\n                    item.classList.add(\"search-result-item\");\n                    item.textContent = annotation.text;\n                    item.style.cssText = `\r\n            padding: 0.5rem;\r\n            cursor: pointer;\r\n          `;\n                    // Add click event listener to each search result item\n                    item.addEventListener(\"click\", () => {\n                        // Handle click action for search result item\n                        // For example, you can navigate to the annotation or perform any other action\n                        console.log(\"Clicked on search result:\", annotation.text);\n                    });\n                    // Append the search result item to the search results dropdown\n                    searchResultContainer.appendChild(item);\n                });\n            }\n            // Show the search results dropdown\n            searchResultContainer.classList.remove(\"hidden\");\n        }\n    }\n}\nfunction sortAnnotationslatest(annotations) {\n    return annotations.sort((a, b) => {\n        // Ensure time is defined and valid\n        const timeA = a.time ? a.time.split(':').map(Number) : [0, 0, 0];\n        const timeB = b.time ? b.time.split(':').map(Number) : [0, 0, 0];\n        // Create Date objects\n        const dateA = new Date(a.year, a.month - 1, a.day, ...timeA);\n        const dateB = new Date(b.year, b.month - 1, b.day, ...timeB);\n        return dateB.getTime() - dateA.getTime(); // Ascending order\n    });\n}\nfunction sortAnnotationsoldest(annotations) {\n    return annotations.sort((a, b) => {\n        // Ensure time is defined and valid\n        const timeA = a.time ? a.time.split(':').map(Number) : [0, 0, 0];\n        const timeB = b.time ? b.time.split(':').map(Number) : [0, 0, 0];\n        // Create Date objects\n        const dateA = new Date(a.year, a.month - 1, a.day, ...timeA);\n        const dateB = new Date(b.year, b.month - 1, b.day, ...timeB);\n        return dateA.getTime() - dateB.getTime(); // Ascending order\n    });\n}\nfunction sortAnnotationsalphabetically(annotations, property) {\n    return annotations.sort((a, b) => {\n        // Access the property for comparison\n        const propertyA = a[property] ? a[property].toLowerCase().replace(/\\s/g, '') : '';\n        const propertyB = b[property] ? b[property].toLowerCase().replace(/\\s/g, '') : '';\n        // Compare the properties alphabetically\n        if (propertyA < propertyB) {\n            return -1;\n        }\n        if (propertyA > propertyB) {\n            return 1;\n        }\n        // If properties are equal, compare by another property or return 0 for equal\n        return 0;\n    });\n}\nfunction handleHighlightClick(color) {\n    ishighlight = !ishighlight; // Toggle the highlighting state\n    if (ishighlight) {\n        console.log(\"Selected color:\", color);\n        document.body.style.cursor = \"text\";\n        document.addEventListener(\"mouseup\", handleMouseUp);\n    }\n    else {\n        // If highlighting is turned off, remove the event listener\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n        document.body.style.cursor = \"auto\";\n    }\n}\nlet notes = [{}];\nfunction handleMouseUp() {\n    const selection = window.getSelection();\n    if (selection && !selection.isCollapsed) {\n        const range = selection.getRangeAt(0);\n        const selectedText = range.toString();\n        const noteText = note;\n        const fontColor = fontcolor; // Get the current font color\n        const fontStyle = fontstyle;\n        const noteData = {\n            text: selectedText,\n            note: noteText,\n            fontColor: fontColor,\n            fontstyle: fontStyle,\n        };\n        notes.push(noteData); // Add the note data to the array\n        const span = document.createElement(\"span\");\n        span.style.backgroundColor = color; // Use the currently selected color\n        span.textContent = selectedText;\n        span.style.position = \"relative\";\n        span.style.fontStyle = noteData.fontstyle;\n        if (noteText !== null && noteText !== \"\") {\n            span.setAttribute(\"data-note\", noteText);\n            const style = document.createElement(\"style\");\n            style.textContent = `\r\n        #note-${notes.length - 1}::after {\r\n          content: attr(data-note);\r\n          position: absolute;\r\n          white-space: nowrap;\r\n          background-color: black;\r\n          color: ${noteData.fontColor}; // Use the font color from the note data\r\n          font-style:${noteData.fontstyle};\r\n          padding: 5px;\r\n          border-radius: 3px;\r\n          opacity: 1; /* Set opacity to 1 by default */\r\n          transition: opacity 0.3s;\r\n          z-index: 1;\r\n          top: 100%;\r\n          left: 50%;\r\n          transform: translateX(-50%);\r\n          pointer-events: none;\r\n        }\r\n      `;\n            span.id = `note-${notes.length - 1}`; // Assign a unique ID to the span\n            document.body.appendChild(style);\n            const d = new Date();\n            const day = d.getDate();\n            const month = d.getMonth() + 1; // Months are zero-based, so add 1\n            const year = d.getFullYear();\n            const hours = d.getHours();\n            const minutes = d.getMinutes();\n            const seconds = d.getSeconds();\n            // Format the time as HH:MM:SS\n            const time = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            chrome.runtime.sendMessage({\n                type: \"SAVE_ANNOTATION\",\n                annotation: {\n                    text: selectedText,\n                    color_highlight: color,\n                    note_text: noteData.note,\n                    note_font_style: noteData.fontstyle,\n                    note_font_color: noteData.fontColor,\n                    day: day,\n                    month: month,\n                    year: year,\n                    time: time\n                },\n                url: window.location.href,\n            });\n        }\n        else {\n            // If no note is added, send the message without the note data\n            const d = new Date();\n            const day = d.getDate();\n            const month = d.getMonth() + 1; // Months are zero-based, so add 1\n            const year = d.getFullYear();\n            const hours = d.getHours();\n            const minutes = d.getMinutes();\n            const seconds = d.getSeconds();\n            // Format the time as HH:MM:SS\n            const time = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n            chrome.runtime.sendMessage({\n                type: \"SAVE_ANNOTATION\",\n                annotation: {\n                    text: selectedText,\n                    color_highlight: color,\n                    day: day,\n                    month: month,\n                    year: year,\n                    time: time\n                },\n                url: window.location.href,\n            });\n        }\n        range.deleteContents();\n        range.insertNode(span);\n    }\n}\n// Function to apply annotations to the DOM\n// Function to apply annotations to the DOM\nfunction applyAnnotations() {\n    allAnnotations.forEach(annotation => {\n        // Find all occurrences of the annotated text in the DOM\n        const elements = document.querySelectorAll(`[data-text=\"${annotation.text}\"]`);\n        elements.forEach(element => {\n            if (element instanceof HTMLElement) {\n                // Apply highlight style to the annotated text\n                element.style.backgroundColor = annotation.color_highlight;\n                // Create a note container\n                const noteContainer = document.createElement('div');\n                noteContainer.classList.add('annotation-note');\n                // Add note text to the note container\n                const noteText = document.createElement('p');\n                noteText.textContent = annotation.note_text;\n                noteContainer.appendChild(noteText);\n                // Position the note container near the highlighted text\n                const rect = element.getBoundingClientRect();\n                noteContainer.style.position = 'absolute';\n                noteContainer.style.top = `${rect.bottom}px`;\n                noteContainer.style.left = `${rect.left}px`;\n                // Add the note container to the document body\n                document.body.appendChild(noteContainer);\n            }\n            else {\n                console.error('Element is not an instance of HTMLElement');\n            }\n        });\n    });\n}\n// Add event listener for keydown event\n// Add event listener for keydown event\n// Add event listener for keydown event\ndocument.addEventListener(\"keydown\", function (event) {\n    // Check if Ctrl key, Shift key, and 'h' key are pressed\n    if (event.ctrlKey && event.shiftKey && event.key === \"H\") {\n        // Call the function to handle highlight click with default color\n        const highlightButton = document.getElementById(\"highlight-button\");\n        const colorbutton = document.getElementById(\"color\");\n        if (colorbutton && highlightButton) {\n            colorbutton.click();\n            highlightButton.click();\n        }\n    }\n    // Check if Ctrl key, Shift key, and 'p' key are pressed\n    if (event.ctrlKey && event.shiftKey && event.key === \"P\") {\n        // Show the note input container\n        const note = document.getElementById(\"note\");\n        if (note) {\n            note.click();\n        }\n    }\n    // Check if Ctrl key, Shift key, and 's' key are pressed\n});\n"],"names":[],"sourceRoot":""}